Good morning/evening everyone, today im going to go through
the backend folders for the sample project

For the 3 main folders, we have deploy, script and src
first the deploy folder, the main purpose of the deploy folder is
to automate code deployments for CI/CD via kurbenetes
next the script folder is filled with script files, in the case of this
project we have a generateKey file to generate key and a generateRsaKey
to generate private and public key for the production environment

finally we have the src folder which where the main bulk of code is located,
inside the src folder we have test, database, handlers, models, network, repositories,
routes, service, and utils

First the test folder, so inside the test folder, we have test files, however instead of clumping all the test files together the test folders
are actually seperated based on what their testing, so the test folder in src will test for the index.js, while the test folder
that tests for the database connection will be under the connection folder.

So under the database folder, aside from the test folder that we've already gone through, we have the a sub folder called models
and a conectionHandler.js file, under the models subfolder, you can actually see the templates and user file.
As you can see here, the templates file under the models subfolder is actually the mongoose schema file for the templates object, 
as for the connectionHandler file it is actually the file responsible for establishing the connection to our database.

Now, for the handler folder aside from the handler files, we also have the helpers and middlewares subfolder, the helpers
folder mainly contains helper functions for the handlers, in the case of this project we have a response.js file which helps us
send the response back, the middleware folder contains middlewares, in the case for this project we have an auth.js file 
to help us check the authentication of the user and retrieve their JWT token. Inside the handler files, it is important to know
that we only call the service function, and return the response here, all the logic is done inside the service funtion.

Now as for the models folder, this folder is actually reponsible for data verification and validation, the files under the models
folder are actually the middleware that will be called on the route, whereas the files under the schema subfolder are the
actual data validation using JOI.

The networks folder has a subfolder called apis which has a file called index.js, the network folder is responsible
for any API calls that are called to outside of the network or application

Next, the repositories folder contains an error.js file for an InstanceNotFoundError, this is called when we want to check an instance error

Next, the routes folder is responsible for routing API calls to their respective middleware and handlers, for example if an
"/createTemplate" endpoint with post method were to be called, the route file will determine which middleware and handler to be called
in this case it will call the auth, and validate middlewate and after that the createTemplate handler.

Next, the service folder, the service folder is where all the logic of creating, retrieving, updating and deleting are stored.
This folder contains all the function which interacts with the database, they call the moongoose schema model to interact with 
the data.

Lastly, the utils folder, this folder contains all the utlity functions, these are typically functions that are small and 
are designed to do a specific task, for example it could be a function to parse strings, or in the case of this project a function
that contains constants, a function taht encrypts and decrypts data, and a helper function